// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

import "@openzeppelin/contracts/math/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import "../interfaces/IFlashLoanReceiver.sol";
import "../interfaces/ISwapFlashLoan.sol";
import "../interfaces/IPancakeRouter02.sol";
import "hardhat/console.sol";

contract FlashLoanExample is IFlashLoanReceiver {
    using SafeMath for uint256;

    // Typical executeOperation function should do the 3 following actions
    // 1. Check if the flashLoan was successful
    // 2. Do actions with the borrowed tokens
    // 3. Repay the debt to the `pool`
    function executeOperation(
        address pool,
        address token,
        uint256 amount,
        uint256 fee,
        bytes calldata params
    ) external override {
        address pancakeRouter_address;
        address GDS_address;
        uint256 amountToSwap;
        //decode params
        (pancakeRouter_address, GDS_address, amountToSwap) = abi.decode(params, (address, address, uint256));
        console.log("pancakeRouter_address", pancakeRouter_address);
        console.log("GDS_address", GDS_address);
        console.log("amountToSwap", amountToSwap);
        // 1. Check if the flashLoan was valid
        uint256 balanceOfThisContract = IERC20(token).balanceOf(address(this));
        console.log("balanceOfThisContract", balanceOfThisContract);
        require(balanceOfThisContract >= amount, "flashloan is broken?");

        // 2. Do actions with the borrowed token

        // swap USDC to GDS using pancakeswap
        //decode params

        // 1. approve pancakeswap router to spend our USDC
        IERC20(token).approve(pancakeRouter_address, amountToSwap);
        console.log("approve USDC to pancakeswap router");

        // 2. swap USDC to GDS
        address[] memory path = new address[](2);
        path[0] = token; // USDC  
        path[1] = GDS_address; // GDS
        IPancakeRouter02(pancakeRouter_address).swapExactTokensForTokensSupportingFeeOnTransferTokens(
            amountToSwap,
            0,
            path,
            address(this),
            1673818514 //deadline -> change it
        );
        uint256 balanceOfThisContractAfter = IERC20(token).balanceOf(address(this));
        console.log("balanceOfThisContractAfter", balanceOfThisContractAfter);

        uint256 balanceOfThisContractGDS = IERC20(GDS_address).balanceOf(address(this));
        console.log("balanceOfThisContractGDS", balanceOfThisContractGDS);


        // 3. Payback debt
        uint256 totalDebt = amount.add(fee);
        console.log("totalDebt", totalDebt);
        IERC20(token).transfer(pool, totalDebt);
    }

    function flashLoan(
        ISwapFlashLoan swap,
        IERC20 token,
        uint256 amount,
        bytes memory params
    ) external {
        console.log("flashLoan started...");

        swap.flashLoan(address(this), token, amount, params);
        console.log("flashLoan ended...");
    }
}
