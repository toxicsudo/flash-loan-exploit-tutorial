import hre, { ethers } from "hardhat";
import { solidityPack } from "ethers/lib/utils";
const flashLoanExampleContractAddress =
  "0x15dC166de43007B2226056c483bA9F772C59d5ba";
const USDCContractAddress = "0x55d398326f99059fF775485246999027B3197955";
const swapFlashLoanContractAddress =
  "0x28ec0b36f0819ecb5005cab836f4ed5a2eca4d13";
const pancakeRouter_address = "0x10ED43C718714eb63d5aA57B78B54704E256024E";
const GDS_address = "0xC1Bb12560468fb255A8e8431BDF883CC4cB3d278";

async function main() {
  console.log("entered");

  const signer = (await ethers.getSigners())[0];
  console.log("signer address ", signer.address);

  const USDCContract = await ethers.getContractAt(
    "IERC20",
    USDCContractAddress,
    signer
  );
  console.log("USDCContract address", USDCContract.address);

  const swapFlashLoanContract = await ethers.getContractAt(
    "ISwapFlashLoan",
    swapFlashLoanContractAddress,
    signer
  );
  const usdcBalance = await USDCContract.balanceOf(
    swapFlashLoanContract.address
  );
  console.log("usdcBalance", usdcBalance.toString());

  // flashLoanExample contract
  const flashLoanExampleContract = await ethers.getContractAt(
    "FlashLoanExample",
    flashLoanExampleContractAddress,
    signer
  );
  const flashLoanExampleContractBalance = await USDCContract.balanceOf(
    flashLoanExampleContract.address
  );
  console.log(
    "flashLoanExampleContractBalance",
    flashLoanExampleContractBalance.toString()
  );

  const usdcBalanceOfSigner = await USDCContract.balanceOf(signer.address);
  console.log("usdcBalanceOfSigner", usdcBalanceOfSigner.toString());

  //transfer USDC to flashSwapExample contract
  // const transferUSDC = await USDCContract.transfer(
  //   flashLoanExampleContract.address,
  //   BigInt(1e18)
  // );
  // await transferUSDC.wait();

  //transfer wont work because signer doesnt have enough USDC balance

  const flashLoanExampleContractBalanceAfter = await USDCContract.balanceOf(
    flashLoanExampleContract.address
  );
  console.log(
    "flashLoanExampleContractBalanceAfter",
    flashLoanExampleContractBalanceAfter.toString()
  );

  //initiate flash loan
  const flashLoanTxn = await flashLoanExampleContract.flashLoan(
    swapFlashLoanContractAddress,
    USDCContractAddress,
    BigInt(1e19), //amount to flash loan
    ethers.utils.defaultAbiCoder.encode(["address", "address", "uint256"], [pancakeRouter_address, GDS_address, BigInt(2e18)]) //last param -> amount to swap to GDS
  );
  const flashloanTxnReceipt = await flashLoanTxn.wait();
  console.log(
    "initiateFlashLoan result",
    flashloanTxnReceipt.status,
    flashloanTxnReceipt.transactionHash
  );
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
